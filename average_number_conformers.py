#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2012-2013 María José Ojeda Montes <mjose.ojeda@urv.cat>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
#This script generate a table (.csv) with the AVERAGE OF NUMBER OF CONFORMERS generated by each tool for conformer generation. The table is divided by number of rotatable bonds between 0 to 7.  

import os,  csv,  pybel, shutil
from glob import glob

#CHANGE YOUR PATHS IN THOSE VARIABLES
path_to_conformers = 'Ligands_conformations/'

#Tools used for conformer generation. PUT ALL NAME OF DIRECTORIES THAT CONTAIN CONFORMERS
programs = ['BALLOON', 'CLEAN3D', 'CONFAB',   'CONFGEN', 'CYNDI', 'OMEGA', 'ROTATE',  'VCONF', 'XEDEX']

#dictionary key= nº rotatable bonds; value = addition of conformers
files = keys = range(8)
keys.sort()

#file with the average of number of conformers
fitxercsv = open('average_of_number_of_conformers_ring.csv', 'wb')
escriptor = csv.writer(fitxercsv)
escriptor.writerow(['Program'] + keys)

#file with the total number of conformers and total number of ligands analysed
fitxercsv2 = open('number_conformations_generated_ring.csv', 'wb')
escriptor2 = csv.writer(fitxercsv2)
escriptor2.writerow(['Program'] + keys + files)

#List of hetids
hetids = [line.strip() for line in open('hetids5370.txt',  'rb')] 

def recompta(program):
    #dictionaries for the number of conformers and the files
    num_conf = {x:0 for x in xrange(8)} 
    total_files = {x:0 for x in xrange(8)}
    for hetid in hetids:
        #set of conformers for a specific ligand generated by a specific tool
        files_conformations = glob(path_to_conformers  +  program + '/' + hetid +'_*.sdf')
        for file in files_conformations:
            #list of conformers for a specific ligand
            mollist = list( pybel.readfile('sdf', file))
            nmols = len(mollist)
            mol = mollist[0]
            enrotlist = [mol.OBMol.NumRotors() for mol in mollist]
            enrot = max(enrotlist)
            minenrot = min(enrotlist)
            #Error in case of there are conformers in the same file with different number of rotatable bonds
            if enrot != minenrot:
                print "!!!%s!!!" % file
                print "%s vs %s" %(enrot, minenrot)
                shutil.copy(file, "enrot_changing")
            for key in keys:
                if  key == enrot:
                    #addition of conformers for a specific number of rotatable bond. 
                    num_conf[key] += nmols
                    total_files[key] += 1
                    print program,  key, ':', num_conf[key]
                    print program,  key, ':', total_files[key]
    return num_conf, total_files, program

import multiprocessing

#Use the different processors of the computer
pool = multiprocessing.Pool()

for num_conf, total_files, program in pool.imap(recompta, programs):
    #average of number of conformers to file "average_of_number_of_conformers.csv"
    escriptor.writerow([program] + [float(num_conf[c]) / total_files[c] if  total_files[c] != 0 else 0  for c in keys])
    #total number of conformers generated and total of ligands analysed to file "number_conformations_generated.csv"
    escriptor2.writerow([program] + [num_conf[ key] for  key in keys] +[total_files[file] for file in files])
    fitxercsv.flush()  
    fitxercsv2.flush()
    
fitxercsv.close()  
fitxercsv2.close()
